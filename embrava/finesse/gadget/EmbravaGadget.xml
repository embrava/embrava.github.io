<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="Embrava Gadget"
	height="465"
        description="Embrava Gadget"
        thumbnail="http://localhost:8080/">

        <Require feature="settitle" />
        <Require feature="dynamic-height" />
        <Require feature="pubsub-2" />
        <Require feature="setprefs" />
    </ModulePrefs>

    <Content type="html">
        <![CDATA[
            <!DOCTYPE html>
			<head>
				<!-- Styling -->
				<link rel="stylesheet" href="EmbravaGadget.css" type="text/css" />

				<!-- Finesse jQuery -->
				<script type="text/javascript" src="/desktop/assets/js/jquery.min.js"></script>
						   
				<!-- Finesse Library -->
				<script type="text/javascript" src="/desktop/assets/js/finesse.js"></script>

				<!-- Gadget Business Logic -->
				<script type="text/javascript" src="EmbravaGadget.js"></script>

				<script type="text/javascript">
					gadgets.HubSettings.onConnect = function () {
						finesse.modules.EmbravaGadget.init();
					};
				</script>
			</head>
			<body>
				<img src="embrava.png" alt="Embrava" id="embravaLogo">
				
				<div class="main">
					<div class="settings">
						<input disabled type="checkbox" id="activateWallboardCheckbox" name="activateWallboardCheckbox" onclick="activateWallboardChange();"/>Activate Wallboard<br />
						<label>Scope:</label><br />
						<select disabled id="scopeSelect" onchange="scopeChange()">
							<option disabled value="0" selected="true" >Please select...</option>
							<option value="1">Team</option>
							<option value="2">Queue</option>
							<option value="3">Agent</option>
						</select><br />
						
						<label hidden id="itemSelectLabel"></label><br />
						<select hidden id="itemSelect" onchange="itemChange()"></select><br />
					</div>
					<div class="debug">
						<textarea hidden readonly class="console" id="debugConsole"></textarea>
					</div>
				</div>
			</body>

			<!-- signalR -->
			<script src="jquery.signalR-2.0.3.min.js"></script>

			<!--Reference the autogenerated SignalR hub script. -->
			<script src="http://wkst2.dcloud.cisco.com:8082/signalr/hubs"></script>

            <script type="text/javascript">
				var embravaConnectURL = "http://localhost:8081/";
				var hub, currentGroup;
				var debug = true;

				$(function () {
					//Set the hubs URL for the connection
					$.connection.hub.url = "http://wkst2.dcloud.cisco.com:8082/signalr";
					
					//Enable logging
					$.connection.hub.logging = true;

					// Declare a proxy to reference the hub.
					hub = $.connection.embravaHub;

					// This means the <script> proxy failed - have to reload
					if (hub == null) {           
						console.error("Embrava Connector - Couldn't connect to server. Please refresh the page.");
						return;
					}
							
					// Connection Events
					hub.connection.error(function (error) {                
						if (error)
							console.error("Embrava Connector - An error occurred: " + error.message);

						onDisconnected();
					});
					
					hub.connection.disconnected(function (error) {                
						console.error("Embrava Connector - Connection lost. " + error);                
						onDisconnected();
						
						// IMPORTANT: continuously try re-starting connection
						setTimeout(function () {                    
							$.connection.hub.start().done(function () {
								document.getElementById('activateWallboardCheckbox').disabled = false;
								gadgets.window.adjustHeight();
							});                   
						}, 2000);
					}); 

					// Create a function that the hub can call to broadcast messages.
					hub.client.updateStats = function (statistics) {
						var statisticsJSON = JSON.parse(statistics);
						if (statisticsJSON.hasOwnProperty('Team')) {
							statisticsJSON.Team.EnterpriseName = $("#itemSelect option:selected").text();
						} else if (statisticsJSON.hasOwnProperty('Queue')) {
							statisticsJSON.Queue.EnterpriseName = $("#itemSelect option:selected").text();
						} else if (statisticsJSON.hasOwnProperty('Agent')) {
							statisticsJSON.Agent.FriendlyName = $("#itemSelect option:selected").text();
						}
						var prettyStatisticsJSON = JSON.stringify(statisticsJSON, undefined, 4);
						sendToEmbravaConnect(prettyStatisticsJSON);
						if (debug) {
							$('#debugConsole').val(function(i, text) {
								return prettyStatisticsJSON + '\n' + text;
							});
						}
					};
					
					$.connection.hub.start().done(function () {
						onConnected();
					});
					
					$.connection.hub.reconnected(function () {
						onConnected();
					});
					
					function onConnected()
					{
						document.getElementById('activateWallboardCheckbox').disabled = false;
						gadgets.window.adjustHeight();
					}
					
					function onDisconnected()
					{
						$('#activateWallboardCheckbox').prop('checked', false);
						document.getElementById('activateWallboardCheckbox').disabled = true;
						activateWallboardChange();
					}
					
					if (debug) {
						$('#debugConsole').show();
					}
				});

				function setOptions(methodName, id, name) {
					let itemSelect = $('#itemSelect');
					itemSelect.empty();
					itemSelect.append('<option selected="true" disabled>Please select...</option>');
					itemSelect.prop('selectedIndex', 0);
					
					switch (methodName) {
						case "GetTeams": 		
							hub.server.getTeams().done(function (result) {
								resultJson = JSON.parse(result)
								$.each(resultJson, function (i) {
									itemSelect.append($('<option></option>').val(resultJson[i][id]).html(resultJson[i][name]));
								});
								document.getElementById("itemSelectLabel").innerHTML = $("#scopeSelect option:selected").text() + ':';
								$('#itemSelect').show();
								$('#itemSelectLabel').show();
								gadgets.window.adjustHeight();
							});
							break;
						case "GetQueues":
							hub.server.getQueues().done(function (result) {
								resultJson = JSON.parse(result)
								$.each(resultJson, function (i) {
									itemSelect.append($('<option></option>').val(resultJson[i][id]).html(resultJson[i][name]));
								});
								document.getElementById("itemSelectLabel").innerHTML = $("#scopeSelect option:selected").text() + ':';
								$('#itemSelect').show();
								$('#itemSelectLabel').show();
								gadgets.window.adjustHeight();
							});
							break;
						case "GetAgents":
							hub.server.getAgents().done(function (result) {
								resultJson = JSON.parse(result)
								$.each(resultJson, function (i) {
									itemSelect.append($('<option></option>').val(resultJson[i][id]).html(resultJson[i][name]));
								});
								document.getElementById("itemSelectLabel").innerHTML = $("#scopeSelect option:selected").text() + ':';
								$('#itemSelect').show();
								$('#itemSelectLabel').show();
								gadgets.window.adjustHeight();
							});
							break;
					}
				}

				/*
				* Join Signal R group
				*/
				function joinGroup()
				{
					currentGroup = $("#scopeSelect option:selected").text() + "-" + $("#itemSelect option:selected").val();
					hub.server.joinGroup(currentGroup).done(function (result) {
						$('#stats').show();
						gadgets.window.adjustHeight();
					})
				}
						
				/*
				* Leave Signal R group
				*/
				function leaveCurrentGroup()
				{
					if (currentGroup != null && hub != null) {
						hub.server.leaveGroup(currentGroup).done(function (result) {
							currentGroup == null;
						})
					}
				}
						
				/*
				* Send POST to Embrava Connect
				*/
				function sendToEmbravaConnect(message) {
					$.ajax({
						type: "POST",
						url: embravaConnectURL,
						data: JSON.stringify({ Message: message }),
						contentType: "application/json; charset=utf-8",
						dataType: "jsonp"
					});
				}

				/*
				* Activate Wallboard checkbox on change handler.
				* This checkbox enables Scope select element or resets and disables all drop down menus.
				*/
				function activateWallboardChange()
				{
					leaveCurrentGroup();
					var checked = document.getElementById('activateWallboardCheckbox').checked;
					document.getElementById('scopeSelect').disabled = !checked;
					
					if (!checked) {
						$('#stats').hide();
						$('#scopeSelect').val("0");
						$('#itemSelect').empty();
						$('#itemSelect').hide();
						$('#itemSelectLabel').hide();
					}
				}

				/*
				* Scope select on change handler. Scope select options are static: Team (scopeId = 1), Queue (scopeId = 2) and Agent (scopeId = 3)).
				* This method retrieves and sets Item Select options from the database based on the selected scope.
				*/
				function scopeChange()
				{
					leaveCurrentGroup();
					var scopeId = $('#scopeSelect')[0].selectedIndex;
					if (scopeId === 1) {		
						setOptions("GetTeams", "AgentTeamID", "EnterpriseName");
					} else if (scopeId === 2) {
						setOptions("GetQueues", "SkillTargetID", "EnterpriseName");
					} else if (scopeId === 3) {
						setOptions("GetAgents", "SkillTargetID", "FriendlyName");
					}
				}

				/*
				* Item select on change handler. Item select options are dynamically retrieved from database based on the scope selected in Scope Select.
				* This method adds session to the SignalR group. The newest statistics are sent to all groups automatically by the server.
				*/
				function itemChange()
				{
					if (currentGroup != null) {
						hub.server.leaveGroup(currentGroup).done(function (result) {
							currentGroup == null;
							joinGroup();
						})
					} else {
						joinGroup();
					}
				}
            </script>
        ]]>
    </Content>
</Module>