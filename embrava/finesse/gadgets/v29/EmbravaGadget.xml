<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="Embrava Gadget"
	height="465"
        description="Embrava Gadget"
        thumbnail="http://localhost:8080/">

        <Require feature="settitle" />
        <Require feature="dynamic-height" />
        <Require feature="pubsub-2" />
        <Require feature="setprefs" />
    </ModulePrefs>

    <Content type="html">
        <![CDATA[
            <!DOCTYPE html>
			<head>
				<!-- Styling -->
				<link rel="stylesheet" href="EmbravaGadget.css" type="text/css" />

				<!-- Finesse jQuery -->
				<script type="text/javascript" src="jquery.min.js"></script>
						   
				<!-- Finesse Library -->
				<script type="text/javascript" src="finesse.js"></script>

				<!-- Gadget Business Logic -->
				<script type="text/javascript" src="Config.js"></script>
				<script type="text/javascript" src="EmbravaGadget.js"></script>

				<script type="text/javascript">
					gadgets.HubSettings.onConnect = function () {
						finesse.modules.EmbravaGadget.init();
					};
				</script>
			</head>
			<body>
				<img src="embrava.png" alt="Embrava" id="embravaLogo">
				
				<div class="main" id="mainDiv">
					<div class="settings">
						<input disabled type="checkbox" id="activateWallboardCheckbox" name="activateWallboardCheckbox" onclick="activateWallboardChange();"/><label id="activateWallboardLabel">Activate Wallboard</label><br />
						<label class="errMsg" id="errMsg"></label><br />
						<label class="selectLabel" id="scopeLabel">Scope:</label><br />
						<select disabled  id="scopeSelect" onchange="scopeChange()">
							<option disabled value="0" selected="true" >Please select...</option>
						</select><br />
						
						<label hidden class="selectLabel" id="itemSelectLabel"></label><br />
						<select hidden id="itemSelect" onchange="itemChange()"></select><br />
					</div>
					<div class="debug">
						<textarea hidden readonly class="console" id="debugConsole"></textarea>
					</div>
				</div>
			</body>

			<!-- signalR -->
			<script src="jquery.signalR-2.0.3.min.js"></script>

			<script type="text/javascript">
				var hub, currentGroup;

				// SignalR Server side URL
				var signalRUrl = embravaConnectorURL + "signalr";

				if (enableEmbravaConnector) {
				
					if (availableScopes.includes('Team')) {
						$('#scopeSelect').append($('<option>', {value:'1', text:'Team'}));
					}
					if (availableScopes.includes('Queue')) {
						$('#scopeSelect').append($('<option>', {value:'2', text:'Queue'}));
					}
					if (availableScopes.includes('Agent')) {
						$('#scopeSelect').append($('<option>', {value:'3', text:'Agent'}));
					}
					
					// Workaround to support error handling for cross domain requests.
					// The fail callback doesn't work if the script is a cross-domain url (neither does the always callback or the global ajaxError handler).
					var timeoutId;
					timeoutId = window.setTimeout(function() {
						console.error('Cannot load SignalR hub script');
						onDisconnected();
					}, 5000);

					// Upload SignalR js library file using jQuery - to avoid problems with Finesse certificates
					$.getScript(signalRUrl + '/hubs')
						// SignalR js library successfully loaded from server
						.done(function( script, textStatus ) {
							window.clearTimeout(timeoutId);
							console.log('SignalR hub script loadded successfully');

							//Set the hubs URL for the connection
							$.connection.hub.url = signalRUrl;
						
							//Enable logging
							$.connection.hub.logging = true;

							// Declare a proxy to reference the hub.
							hub = $.connection.embravaHub;

							// This means the <script> proxy failed - have to reload
							if (hub == null) {           
								console.error("Embrava Connector - Couldn't connect to server. Please refresh the page.");
								return;
							}
									
							// Connection Events
							hub.connection.error(function (error) {
								if (error)
									console.error("Embrava Connector - An error occurred: " + error.message);

								onDisconnected();
							});
							
							hub.connection.disconnected(function (error) {           
								console.error("Embrava Connector - Connection lost. " + error);                
								onDisconnected();
								
								// IMPORTANT: continuously try re-starting connection
								setTimeout(function () {                    
									$.connection.hub.start().done(function () {
										onConnected();
									});                   
								}, 2000);
							}); 

							// Create a function that the hub can call to broadcast messages.
							hub.client.updateStats = function (statistics) {
								var statisticsJSON = JSON.parse(statistics);
								if (statisticsJSON.hasOwnProperty('Team')) {
									statisticsJSON.Team.EnterpriseName = $("#itemSelect option:selected").text();
								} else if (statisticsJSON.hasOwnProperty('Queue')) {
									statisticsJSON.Queue.EnterpriseName = $("#itemSelect option:selected").text();
								} else if (statisticsJSON.hasOwnProperty('Agent')) {
									statisticsJSON.Agent.FriendlyName = $("#itemSelect option:selected").text();
								}
								var prettyStatisticsJSON = JSON.stringify(statisticsJSON, undefined, 4);
								sendToEmbravaConnect(prettyStatisticsJSON);
								if (debug) {
									$('#debugConsole').val(function(i, text) {
										return prettyStatisticsJSON + '\n' + text;
									});
								}
							};
							
							$.connection.hub.start().done(function () {
								onConnected();
							});
							
							$.connection.hub.reconnected(function () {
								onConnected();
							});
							
							function onConnected()
							{
								$('#errMsg').text('');
								document.getElementById('activateWallboardCheckbox').disabled = false;
								gadgets.window.adjustHeight();
							}
						});
						
					function onDisconnected()
					{
						$('#errMsg').text('Cannot connect to Embrava Connector');
						$('#activateWallboardCheckbox').prop('checked', false);
						document.getElementById('activateWallboardCheckbox').disabled = true;
						activateWallboardChange();
					};

				} else {
					$('#scopeSelect').hide();
					$('#scopeLabel').hide();
					$('#activateWallboardCheckbox').hide();
					$('#activateWallboardLabel').hide();
					if (!debug) {
						$('#mainDiv').hide();
					}
					gadgets.window.adjustHeight();
				}
				
				if (debug) {
					$('#debugConsole').show();
					gadgets.window.adjustHeight();
				}

				$(window).load(function() {
					gadgets.window.adjustHeight(); 
				});

			</script>

            <script type="text/javascript">
				function setOptions(methodName, id, name) {
					let itemSelect = $('#itemSelect');
					itemSelect.empty();
					itemSelect.append('<option selected="true" disabled>Please select...</option>');
					itemSelect.prop('selectedIndex', 0);
					
					switch (methodName) {
						case "GetTeams": 		
							hub.server.getTeams().done(function (result) {
								resultJson = JSON.parse(result)
								$.each(resultJson, function (i) {
									itemSelect.append($('<option></option>').val(resultJson[i][id]).html(resultJson[i][name]));
								});
								document.getElementById("itemSelectLabel").innerHTML = $("#scopeSelect option:selected").text() + ':';
								$('#itemSelect').show();
								$('#itemSelectLabel').show();
								gadgets.window.adjustHeight();
							});
							break;
						case "GetQueues":
							hub.server.getQueues().done(function (result) {
								resultJson = JSON.parse(result)
								$.each(resultJson, function (i) {
									itemSelect.append($('<option></option>').val(resultJson[i][id]).html(resultJson[i][name]));
								});
								document.getElementById("itemSelectLabel").innerHTML = $("#scopeSelect option:selected").text() + ':';
								$('#itemSelect').show();
								$('#itemSelectLabel').show();
								gadgets.window.adjustHeight();
							});
							break;
						case "GetAgents":
							hub.server.getAgents().done(function (result) {
								resultJson = JSON.parse(result)
								$.each(resultJson, function (i) {
									itemSelect.append($('<option></option>').val(resultJson[i][id]).html(resultJson[i][name]));
								});
								document.getElementById("itemSelectLabel").innerHTML = $("#scopeSelect option:selected").text() + ':';
								$('#itemSelect').show();
								$('#itemSelectLabel').show();
								gadgets.window.adjustHeight();
							});
							break;
					}
				}

				/*
				* Join Signal R group
				*/
				function joinGroup()
				{
					currentGroup = $("#scopeSelect option:selected").text() + "-" + $("#itemSelect option:selected").val();
					hub.server.joinGroup(currentGroup).done(function (result) {
						$('#stats').show();
						gadgets.window.adjustHeight();
					})
				}
						
				/*
				* Leave Signal R group
				*/
				function leaveCurrentGroup()
				{
					if (currentGroup != null && hub != null) {
						hub.server.leaveGroup(currentGroup).done(function (result) {
							currentGroup == null;
						})
					}
				}
						
				/*
				* Send POST to Embrava Connect
				*/
				function sendToEmbravaConnect(message) {
					$.ajax({
						type: "POST",
						url: embravaConnectURL,
						data: JSON.stringify({ Message: message }),
						contentType: "application/json; charset=utf-8",
						dataType: "jsonp"
					});
				}

				/*
				* Activate Wallboard checkbox on change handler.
				* This checkbox enables Scope select element or resets and disables all drop down menus.
				*/
				function activateWallboardChange()
				{
					leaveCurrentGroup();
					var checked = document.getElementById('activateWallboardCheckbox').checked;
					document.getElementById('scopeSelect').disabled = !checked;
					
					if (!checked) {
						$('#stats').hide();
						$('#scopeSelect').val("0");
						$('#itemSelect').empty();
						$('#itemSelect').hide();
						$('#itemSelectLabel').hide();
					}
				}

				/*
				* Scope select on change handler. Scope select options are static: Team (scopeId = 1), Queue (scopeId = 2) and Agent (scopeId = 3)).
				* This method retrieves and sets Item Select options from the database based on the selected scope.
				*/
				function scopeChange()
				{
					leaveCurrentGroup();
					var scopeId = $('#scopeSelect').val();
					if (scopeId == 1) {		
						setOptions("GetTeams", "AgentTeamID", "EnterpriseName");
					} else if (scopeId == 2) {
						setOptions("GetQueues", "SkillTargetID", "EnterpriseName");
					} else if (scopeId == 3) {
						setOptions("GetAgents", "SkillTargetID", "FriendlyName");
					}
				}

				/*
				* Item select on change handler. Item select options are dynamically retrieved from database based on the scope selected in Scope Select.
				* This method adds session to the SignalR group. The newest statistics are sent to all groups automatically by the server.
				*/
				function itemChange()
				{
					if (currentGroup != null) {
						hub.server.leaveGroup(currentGroup).done(function (result) {
							currentGroup == null;
							joinGroup();
						})
					} else {
						joinGroup();
					}
				}
            </script>
        ]]>
    </Content>
</Module>